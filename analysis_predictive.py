# -*- coding: utf-8 -*-
"""analysis_predictive.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z3D5qnkoWOBQZWNRQfl62GBy6CeBQni-
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, MinMaxScaler, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.model_selection import GridSearchCV

from sklearn.metrics import (
    accuracy_score,
    precision_score,
    recall_score,
    f1_score,
    confusion_matrix,
    classification_report,
)

df = pd.read_csv("Sleep_health_and_lifestyle_dataset.csv")

df.info()

df.head()

print("\n Jumlah Missing Values : ")
print(df.isnull().sum())

"""Pada df.isnull().sum() diatas terdapat 219 yang bernilai NaN, Namun pada dataset ini. Nilai Nan berarti bahwa tidak terdapat gangguan tidur yang dialami (insomnia ataupun Sleep Anea)"""

# Cek jumlah data yang duplikat (baris yang sama persis)
print("\nJumlah Data Duplikat:")
df.duplicated().sum()

categorical_cols = ['Gender', 'Occupation', 'BMI Category', 'Sleep Disorder']
for feature in categorical_cols:
    plt.figure(figsize=(8, 6))

    # Ambil hanya 16 kategori paling sering muncul
    top_categories = df[feature].value_counts().nlargest()

    ax = sns.barplot(x=top_categories.index, y=top_categories.values, color="#166A8E")
    ax.bar_label(ax.containers[0], label_type='edge')

    plt.title(f'Distribusi {feature}', fontsize=14)
    plt.xticks(rotation=45)
    plt.xlabel(feature, fontsize=12)
    plt.ylabel('Count', fontsize=12)
    plt.tight_layout()

    plt.show()

sns.countplot(data=df, x='Quality of Sleep')
plt.title('Distribusi Kualitas Tidur')
plt.show()

"""Pada distribusi kualitar tidur terdapat orang dengan tidur 4 sampai 9 Jam. Pada distribusi ini, kebanyakan orang sudah memiliki waktu tidur yang cukup."""

numerical_cols = ['Age', 'Sleep Duration', 'Physical Activity Level', 'Stress Level', 'Heart Rate', 'Daily Steps', 'Quality of Sleep']

fig, axes = plt.subplots(nrows=len(numerical_cols), ncols=1, figsize=(8, 4 * len(numerical_cols)))

# Plot boxplot untuk setiap kolom numerik
for ax, col in zip(axes, numerical_cols):
    sns.boxplot(x=df[col], ax=ax)
    ax.set_title(f'Boxplot untuk {col}')

plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 8))
sns.heatmap(df[numerical_cols].corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Matriks Korelasi Fitur Numerik')
plt.show()

"""*Penjelasan : (Heatmap Matrik)*
- Durasi Tidur dan Kualitas Tidur (0.88): Ada korelasi positif yang sangat kuat. Ini menunjukkan bahwa durasi tidur yang lebih lama sangat terkait dengan kualitas tidur yang lebih tinggi, yang masuk akal secara intuitif.
- Tingkat Stres dan Kualitas Tidur (-0.90): Ada korelasi negatif yang sangat kuat. Ini menunjukkan bahwa seiring dengan peningkatan tingkat stres, kualitas tidur cenderung menurun secara signifikan.
- Tingkat Stres dan Durasi Tidur (-0.81): Korelasi negatif yang kuat, menyiratkan bahwa tingkat stres yang lebih tinggi dikaitkan dengan durasi tidur yang lebih pendek.
- Tingkat Aktivitas Fisik dan Langkah Harian (0.77): Korelasi positif yang kuat, yang diharapkan karena aktivitas fisik yang lebih banyak umumnya berarti lebih banyak langkah harian.
- Tingkat Stres dan Detak Jantung (0.67): Korelasi positif yang cukup kuat. Tingkat stres yang lebih tinggi sering dikaitkan dengan peningkatan detak jantung.
- Usia dan Durasi Tidur (0.34): Korelasi positif yang lemah. Ini menunjukkan sedikit kecenderungan bagi individu yang lebih tua untuk memiliki durasi tidur yang lebih lama, tetapi itu bukan hubungan yang kuat.
- Langkah Harian dan Kualitas Tidur (0.02): Korelasi positif yang sangat lemah, hampir dapat diabaikan. Ini menyiratkan bahwa jumlah langkah harian memiliki sedikit atau tidak ada hubungan linier dengan kualitas tidur berdasarkan data ini.

# Data Preprocessing
"""

df = df.drop('Person ID', axis=1)
df['Sleep Disorder'] = df['Sleep Disorder'].fillna('No Disorder')

"""*Penjelasan :*
- Melakukan Dropping pada kolom Person ID
- Mengisi nilai yang hilang atau NaN pada kolom 'Sleep Disorder' dengan No Disorder (Tidak memiliki gangguan tidur)
"""

df.head(7)

print(f"Jumlah Missing Values :\n{df.isnull().sum()}")

df[['Systolic BP', 'Diastolic BP']] = df['Blood Pressure'].str.split('/', expand=True).astype(int)
df = df.drop('Blood Pressure', axis=1)

"""*Penjelasan :*
- Memisahkan nilai pada kolom 'Blood Pressure' yang bertipe data string menjadi 'Systolic BP', 'Diastolic BP' menjadi 2 kolom numerik yang terpisang.
"""

df['Quality of Sleep_Category'] = df['Quality of Sleep'].apply(lambda x: 'Good' if x > 7 else 'Bad')
le_quality = LabelEncoder()
df['Quality of Sleep_Encoded'] = le_quality.fit_transform(df['Quality of Sleep_Category'])
# Simpan mapping untuk interpretasi hasil evaluasi
quality_mapping = dict(zip(le_quality.classes_, le_quality.transform(le_quality.classes_)))
print(f"Quality of Sleep Mapping: {quality_mapping}")

# Simpan mapping untuk interpretasi hasil evaluasi
quality_mapping = dict(zip(le_quality.classes_, le_quality.transform(le_quality.classes_)))
print(f"Quality of Sleep Mapping: {quality_mapping}")

"""*Penjelasan :*
- Kolom Quality of Sleep_Category yang memiliki rentang nilai dari 1 - 10. Akan dikategorikan menjadi 2 kelas : Baik dan Buruk. Kategori akan bernilai Good (Baik apabila skor > 7) dan akan bernilai Bad (Buruk apabila skro <6 )
"""

X = df.drop(['Quality of Sleep', 'Quality of Sleep_Category', 'Quality of Sleep_Encoded'], axis=1)
y = df['Quality of Sleep_Encoded']

# Encoding Fitur Kategorikal (melakukan Label Encoding untuk kesederhanaan awal)
categorical_cols = ['Gender', 'Occupation', 'BMI Category', 'Sleep Disorder']
for col in categorical_cols:
    le = LabelEncoder()
    X[col] = le.fit_transform(X[col])

#  Penskalaan/Normalisasi Fitur Numerik
numericals_cols = ['Age', 'Sleep Duration', 'Physical Activity Level', 'Stress Level', 'Heart Rate', 'Daily Steps', 'Systolic BP', 'Diastolic BP']
scaler = StandardScaler()
X[numericals_cols] = scaler.fit_transform(X[numericals_cols])

# Pembagian Data Training dan Testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

print("\nData setelah pra-pemrosesan:")
print(X_train.head())
print(y_train.value_counts())

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV

# Model Baseline
rf_model_baseline = RandomForestClassifier(random_state=42)

print("Melatih model baseline...")
rf_model_baseline.fit(X_train, y_train) # model Baseline Random FOrest
print("Pelatihan model baseline selesai.")

# Hyperparameter Tuning untuk Random Forest
print("\nMemulai Hyperparameter Tuning untuk Random Forest (GridSearchCV)...")
param_grid = {
    'n_estimators': [50, 100, 150, 200],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

grid_search_rf = GridSearchCV(estimator=rf_model_baseline, param_grid=param_grid,
                              cv=5, n_jobs=-1, verbose=1, scoring='f1_weighted')
grid_search_rf.fit(X_train, y_train)

best_rf_model = grid_search_rf.best_estimator_
print(f"\nBest parameters for Random Forest: {grid_search_rf.best_params_}")
print("Hyperparameter Tuning Random Forest selesai.")

print("\n--- Evaluasi Model Random Forest Terbaik (Tuned) ---")
y_pred_rf_tuned = best_rf_model.predict(X_test)

# Akurasi
accuracy_rf_tuned = accuracy_score(y_test, y_pred_rf_tuned)
print(f"Akurasi: {accuracy_rf_tuned:.4f}")

# Laporan Klasifikasi
print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred_rf_tuned, target_names=le_quality.classes_))

# Confusion Matrix
print("\nConfusion Matrix:")
cm_rf_tuned = confusion_matrix(y_test, y_pred_rf_tuned)
sns.heatmap(cm_rf_tuned, annot=True, fmt='d', cmap='Blues',
            xticklabels=le_quality.classes_, yticklabels=le_quality.classes_)
plt.xlabel('Prediksi')
plt.ylabel('Aktual')
plt.title('Confusion Matrix: Random Forest Tuned')
plt.show()